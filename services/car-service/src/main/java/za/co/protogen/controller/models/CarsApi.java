/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.43).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package za.co.protogen.controller.models;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.List;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2023-08-21T03:43:43.329248900+02:00[Africa/Johannesburg]")
@Validated
public interface CarsApi {

    @Operation(summary = "Creates a car", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Car added successfully") })
    @RequestMapping(value = "/cars",
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> createCar(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody CarDTO body);


    @Operation(summary = "Retrieves all cars that a user has access to", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Retrieve success response", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = CarDTO.class)))) })
    @RequestMapping(value = "/cars",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<CarDTO>> getAllCars();


    @Operation(summary = "Retrieve a car by year", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Retrieve success response", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = CarDTO.class)))),
        
        @ApiResponse(responseCode = "404", description = "Car not found") })
    @RequestMapping(value = "/cars/year/{carYear}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<CarDTO>> getCarByCarYear(@Parameter(in = ParameterIn.PATH, description = "year of a car to retrieve", required=true, schema=@Schema()) @PathVariable("carYear") Integer carYear);


    @Operation(summary = "Retrieve a car by color", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Retrieve success response", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = CarDTO.class)))),
        
        @ApiResponse(responseCode = "404", description = "Car not found") })
    @RequestMapping(value = "/cars/color/{color}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<CarDTO>> getCarByColor(@Parameter(in = ParameterIn.PATH, description = "color of a car to retrieve", required=true, schema=@Schema()) @PathVariable("color") String color);


    @Operation(summary = "Retrieve a car by make", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Retrieve success response", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = CarDTO.class)))),
        
        @ApiResponse(responseCode = "404", description = "Car not found") })
    @RequestMapping(value = "/cars/make/{make}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<CarDTO>> getCarByMake(@Parameter(in = ParameterIn.PATH, description = "make of a car to retrieve", required=true, schema=@Schema()) @PathVariable("make") String make);


    @Operation(summary = "Retrieve a car by vin number", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Retrieve success response", content = @Content(mediaType = "application/json", schema = @Schema(implementation = CarDTO.class))),
        
        @ApiResponse(responseCode = "404", description = "Car not found") })
    @RequestMapping(value = "/cars/vin/{vin}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<CarDTO> getCarByVin(@Parameter(in = ParameterIn.PATH, description = "vin number of a car to retrieve", required=true, schema=@Schema()) @PathVariable("vin") String vin);


    @Operation(summary = "Retrieve a car by id number", description = "", tags={  })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Retrieve success response", content = @Content(mediaType = "application/json", schema = @Schema(implementation = CarDTO.class))),

            @ApiResponse(responseCode = "404", description = "Car not found") })
    @RequestMapping(value = "/cars/id/{id}",
            produces = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<CarDTO> getCarById(@Parameter(in = ParameterIn.PATH, description = "id number of a car to retrieve", required=true, schema=@Schema()) @PathVariable("id") Long id);


    @Operation(summary = "Remove a car by vin number", description = "", tags={  })
    @ApiResponses(value = {  })
    @RequestMapping(value = "/cars/vin/{vin}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> removeCar(@Parameter(in = ParameterIn.PATH, description = "vin number of a car to remove", required=true, schema=@Schema()) @PathVariable("vin") String vin);


    @Operation(summary = "Retrieve cars by search query", description = "", tags={  })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Retrieve success response", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = CarDTO.class)))),

            @ApiResponse(responseCode = "404", description = "Car not found") })
    @RequestMapping(value = "/cars/search",
            produces = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<List<CarDTO>> searchCar(@Parameter(in = ParameterIn.QUERY, description = "id of a car to search" ,schema=@Schema()) @Valid @RequestParam(value = "id", required = false) Long id, @Parameter(in = ParameterIn.QUERY, description = "vin of a car to search" ,schema=@Schema()) @Valid @RequestParam(value = "vin", required = false) String vin, @Parameter(in = ParameterIn.QUERY, description = "make of a car to search" ,schema=@Schema()) @Valid @RequestParam(value = "make", required = false) String make, @Parameter(in = ParameterIn.QUERY, description = "model of a car to search" ,schema=@Schema()) @Valid @RequestParam(value = "model", required = false) String model, @Parameter(in = ParameterIn.QUERY, description = "year of a car to search" ,schema=@Schema()) @Valid @RequestParam(value = "carYear", required = false) Integer carYear, @Parameter(in = ParameterIn.QUERY, description = "color of a car to search" ,schema=@Schema()) @Valid @RequestParam(value = "color", required = false) String color, @Parameter(in = ParameterIn.QUERY, description = "engine of a car to search" ,schema=@Schema()) @Valid @RequestParam(value = "engine", required = false) String engine, @Parameter(in = ParameterIn.QUERY, description = "transmission of a car to search" ,schema=@Schema()) @Valid @RequestParam(value = "transmission", required = false) String transmission, @Parameter(in = ParameterIn.QUERY, description = "fuel type of a car to search" ,schema=@Schema()) @Valid @RequestParam(value = "fuelType", required = false) String fuelType, @Parameter(in = ParameterIn.QUERY, description = "mileage of a car to search" ,schema=@Schema()) @Valid @RequestParam(value = "mileage", required = false) Double mileage, @Parameter(in = ParameterIn.QUERY, description = "price of a car to search" ,schema=@Schema()) @Valid @RequestParam(value = "price", required = false) Double price, @Parameter(in = ParameterIn.QUERY, description = "owner Id of a car to search" ,schema=@Schema()) @Valid @RequestParam(value = "ownerId", required = false) Double ownerId, @Parameter(in = ParameterIn.QUERY, description = "features of a car to search" ,schema=@Schema()) @Valid @RequestParam(value = "features", required = false) List features);


    @Operation(summary = "update a car by vin number", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Car updated successfully"),
        
        @ApiResponse(responseCode = "404", description = "Car not found") })
    @RequestMapping(value = "/cars/vin/{vin}",
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateCar(@Parameter(in = ParameterIn.PATH, description = "vin number of a car to update", required=true, schema=@Schema()) @PathVariable("vin") String vin, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody CarDTO body);

}

