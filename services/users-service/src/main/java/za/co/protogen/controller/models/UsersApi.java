/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.43).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package za.co.protogen.controller.models;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import java.time.LocalDate;

import javax.validation.Valid;
import java.util.List;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2023-08-22T16:51:23.162448800+02:00[Africa/Johannesburg]")
@Validated
public interface UsersApi {

    @Operation(summary = "Creates a user", description = "", tags={  })
    @ApiResponses(value = {
        @ApiResponse(responseCode = "201", description = "User added successfully") })
    @RequestMapping(value = "/users",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> addUser(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody UserDTO body);


    @Operation(summary = "Retrieves all users that a user has access to", description = "", tags={  })
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "Retrieve success response", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = UserDTO.class)))) })
    @RequestMapping(value = "/users",
        produces = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<List<UserDTO>> getAllUser();


    @Operation(summary = "Retrieve a user by id", description = "", tags={  })
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "Retrieve success response", content = @Content(mediaType = "application/json", schema = @Schema(implementation = UserDTO.class))),

        @ApiResponse(responseCode = "404", description = "User not found") })
    @RequestMapping(value = "/users/{id}",
        produces = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<UserDTO> getUserById(@Parameter(in = ParameterIn.PATH, description = "id of a user to retrieve", required=true, schema=@Schema()) @PathVariable("id") Long id);


    @Operation(summary = "Retrieves user by search", description = "", tags={  })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "User query successfully", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = com.example.userservice.models.UserDTO.class)))),

            @ApiResponse(responseCode = "404", description = "User not found") })
    @RequestMapping(value = "/users/search",
            produces = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<List<UserDTO>> searchUser(@Parameter(in = ParameterIn.QUERY, description = "id of a user to search" ,schema=@Schema()) @Valid @RequestParam(value = "id", required = false) Long id, @Parameter(in = ParameterIn.QUERY, description = "first name of a user to search" ,schema=@Schema()) @Valid @RequestParam(value = "firstName", required = false) String firstName, @Parameter(in = ParameterIn.QUERY, description = "last name of a user to search" ,schema=@Schema()) @Valid @RequestParam(value = "lastName", required = false) String lastName, @Parameter(in = ParameterIn.QUERY, description = "date of birth of a user to search" ,schema=@Schema()) @Valid @RequestParam(value = "dateOfBirth", required = false) LocalDate dateOfBirth, @Parameter(in = ParameterIn.QUERY, description = "rsa id of a user to search" ,schema=@Schema()) @Valid @RequestParam(value = "rsaId", required = false) String rsaId);


    @Operation(summary = "Remove a user by id", description = "", tags={  })
    @ApiResponses(value = {  })
    @RequestMapping(value = "/users/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> removeUser(@Parameter(in = ParameterIn.PATH, description = "id of a user to remove", required=true, schema=@Schema()) @PathVariable("id") Long id);


    @Operation(summary = "update a user by id", description = "", tags={  })
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "User updated successfully"),

        @ApiResponse(responseCode = "404", description = "User not found") })
    @RequestMapping(value = "/users/{id}",
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateUser(@Parameter(in = ParameterIn.PATH, description = "id of a user to update", required=true, schema=@Schema()) @PathVariable("id") Long id, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody UserDTO userDTO);

}

