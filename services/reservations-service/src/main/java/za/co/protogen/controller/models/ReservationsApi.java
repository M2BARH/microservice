/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.43).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package za.co.protogen.controller.models;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.threeten.bp.LocalDate;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import java.util.List;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2023-08-21T00:50:30.701153200+02:00[Africa/Johannesburg]")
@Validated
public interface ReservationsApi {

    @Operation(summary = "Creates a reservation", description = "", tags={  })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "201", description = "Reservation added successfully") })
    @RequestMapping(value = "/reservations",
            consumes = { "application/json" },
            method = RequestMethod.POST)
    ResponseEntity<Void> createReservation(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody ReservationDTO body);


    @Operation(summary = "Retrieves all reservations that a user has access to", description = "", tags={  })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Retrieve success response", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ReservationDTO.class)))) })
    @RequestMapping(value = "/reservations",
            produces = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<List<ReservationDTO>> getAllReservation();


    @Operation(summary = "Retrieve a reservation by id", description = "", tags={  })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Retrieve success response", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ReservationDTO.class))),

            @ApiResponse(responseCode = "404", description = "Reservation not found") })
    @RequestMapping(value = "/reservations/{id}",
            produces = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<ReservationDTO> getReservationById(@Parameter(in = ParameterIn.PATH, description = "id of a reservation to retrieve", required=true, schema=@Schema()) @PathVariable("id") Long id);


    @Operation(summary = "Remove a reservation by id", description = "", tags={  })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "204", description = "Reservation removed successfully") })
    @RequestMapping(value = "/reservations/{id}",
            method = RequestMethod.DELETE)
    ResponseEntity<Void> removeReservationById(@NotNull @Parameter(in = ParameterIn.PATH, description = "id of a reservation to remove" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "id", required = true) Long id);


    @Operation(summary = "Retrieve reservations by search query", description = "", tags={  })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Reservation query successfully", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = com.example.reservationservice.models.ReservationDTO.class)))),

            @ApiResponse(responseCode = "404", description = "Reservation not found") })
    @RequestMapping(value = "/reservations/search",
            produces = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<List<ReservationDTO>> searchReservation(@Parameter(in = ParameterIn.QUERY, description = "id of a user to search" ,schema=@Schema()) @Valid @RequestParam(value = "userId", required = false) Long userId, @Parameter(in = ParameterIn.QUERY, description = "id of a car to search" ,schema=@Schema()) @Valid @RequestParam(value = "carId", required = false) Long carId, @Parameter(in = ParameterIn.QUERY, description = "date of a reservation to search" ,schema=@Schema()) @Valid @RequestParam(value = "fromDate", required = false) LocalDate fromDate, @Parameter(in = ParameterIn.QUERY, description = "date of a reservation to search" ,schema=@Schema()) @Valid @RequestParam(value = "toDate", required = false) LocalDate toDate, @Parameter(in = ParameterIn.QUERY, description = "pick up location of a reservation to search" ,schema=@Schema()) @Valid @RequestParam(value = "pickUpLocation", required = false) String pickUpLocation, @Parameter(in = ParameterIn.QUERY, description = "drop off location of a reservation to search" ,schema=@Schema()) @Valid @RequestParam(value = "dropOffLocation", required = false) String dropOffLocation);


    @Operation(summary = "update reservation by id", description = "", tags={  })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Reservation updated successfully"),

            @ApiResponse(responseCode = "404", description = "Reservation not found") })
    @RequestMapping(value = "/reservations/{id}",
            consumes = { "application/json" },
            method = RequestMethod.PUT)
    ResponseEntity<Void> updateReservationById(@Parameter(in = ParameterIn.PATH, description = "id of a reservation to update", required=true, schema=@Schema()) @PathVariable("id") Long id, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody ReservationDTO reservationDTO);

}

